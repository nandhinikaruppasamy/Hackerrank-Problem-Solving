import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'gridChallenge' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts STRING_ARRAY grid as parameter.
     */

    public static String gridChallenge(List<String> grid) {
    // Write your code here
    for(int i=0;i<grid.size();i++){
        char[] a = grid.get(i).toCharArray();
        Arrays.sort(a);
        grid.set(i,new String(a));
    }
    char[][] f = new char[grid.size()][grid.get(0).length()];
    for(int i=0;i<grid.size();i++){
        String w = grid.get(i);
        for(int j=0;j<w.length();j++){
            f[i][j]= w.charAt(j);
        }
    }
    boolean find = true;
    for(int i=0;i<grid.get(0).length();i++){
        String temp ="";
        for(int j=0;j<grid.size();j++){
            temp += f[j][i];
        }
        char[] d = temp.toCharArray();
        Arrays.sort(d);
        String e = new String(d);
        if(!temp.equals(e)){
            find = false;break;
        }
    }
    if(find) return "YES";
    else return "NO";
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                int n = Integer.parseInt(bufferedReader.readLine().trim());

                List<String> grid = IntStream.range(0, n).mapToObj(i -> {
                    try {
                        return bufferedReader.readLine();
                    } catch (IOException ex) {
                        throw new RuntimeException(ex);
                    }
                })
                    .collect(toList());

                String result = Result.gridChallenge(grid);

                bufferedWriter.write(result);
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
